[project]
name = "hippocampus"
version = "0.7.0"
description = "Knowledge acquisition pipelines with clean architecture"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "Proprietary" }
dependencies = [
	"jsonschema>=4",
	"pyyaml>=6.0",
    "keyring>=24.0",
	"jinja2>=3.1",
	"rich>=13.7",
    # Full install: LLMs, PDF and Graph engines disponíveis por padrão
    "pypdf>=6.0.0",
    "langchain>=0.3.27",
    "langchain-openai>=0.3.33",
    "langchain-google-genai>=2.1.12",
    "langchain-anthropic>=0.3.20",
    "langgraph>=0.2.46",
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Environment :: Console",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "License :: Other/Proprietary License",
]



[project.scripts]
hippo = "core.cli.root:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["core"]

# Garante inclusão do schema no wheel
force-include = {"core/resources/schemas/manifest.schema.json" = "core/resources/schemas/manifest.schema.json"}

[tool.hatch.build]
include = [
    "core/**",
]

## optional-dependencies removidos: instalação completa por padrão

[project.urls]
Homepage = "https://github.com/brain-model/hippocampus"
Repository = "https://github.com/brain-model/hippocampus"
Documentation = "https://brain-model.github.io/hippocampus/"  # MkDocs (Material)


[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "pyment>=0.3.3",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.1",
    "pre-commit>=3.0.0",
]

# ==============================================================================
# Code Quality and Tooling Configuration
# ==============================================================================

[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    ".venv",
    "build",
    "dist",
    "*.egg-info",
    "__pycache__",
    ".pytest_cache",
    ".coverage",
    "htmlcov",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "RET",    # flake8-return
    "ERA",    # eradicate (commented code)
    "PL",     # pylint
    "C90",    # mccabe (cognitive complexity)
]
ignore = [
    "PLR0913", # too-many-arguments
    "PLR0912", # too-many-branches
    "PLR0915", # too-many-statements (allow for main functions)
    "N818",    # exception-name-should-end-with-error
    "ERA001",  # found-commented-out-code (false positives in docs)
    "PLC0415", # import-outside-toplevel (needed for lazy imports)
    "PTH101",  # os-chmod-should-use-path-chmod (compatibility needed)
    "B904",    # raise-without-from-inside-except (not always needed)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG001",  # unused-function-argument (fixtures)
    "ARG002",  # unused-method-argument (test mocks)
    "ARG005",  # unused-lambda-argument (test lambdas)
    "PLR2004", # magic-value-comparison (test values)
    "SIM117",  # use-single-with (test readability)
    "B017",    # assert-raises-exception (test patterns)
    "B011",    # assert-false (test patterns)
]

[tool.black]
line-length = 88
target-version = ["py311"]
extend-exclude = '''
/(
    \.venv
    | build
    | dist
    | \.egg-info
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["core", "tests"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--maxfail=1",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["core"]
omit = [
    "tests/*",
    "core/__pycache__/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
fail_under = 90

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = [
    "B101",  # assert_used (common in tests, but we exclude tests anyway)
    "B110",  # try_except_pass (acceptable for optional import fallbacks)
    "B311",  # random (acceptable for non-crypto jitter)
    "B601",  # paramiko_calls (if using paramiko for SSH)
    "B602",  # subprocess_popen_with_shell_equals_true
]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
